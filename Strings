Find the Questions :
1.  stack<char>st;
        string ans="";
        for(int i=0;i<s.size();i++){
            if(st.empty()){
               if(s[i]=='('){
                 st.push(s[i]);
               }
            }
            else if(st.empty()==0){
                if(s[i]=='('){
                    st.push(s[i]);
                    ans+=s[i];
                }
                else{
                    st.pop();
                    if(!st.empty()){
                        ans+=s[i];
                    }
                    else{
                        continue;
                    }
                }
            }
        }
        return ans; 

2.  int i=n.size()-1;
        while(i>=0){
            
            if(n[i]%2){
                return n.substr(0,i+1);
            }
           i--;
           
        }
        return "";
3.   unordered_map<char,char>m;
        for(int i=0;i<s.size();i++){
            if(m.find(s[i])!=m.end()){
                if(t[i]==m[s[i]]){
                    continue;
                }
                else{
                    return 0;
                }
            }
            else{
                m[s[i]]=t[i];
            }
        }
        m.clear();
        for(int i=0;i<t.size();i++){
            if(m.find(t[i])!=m.end()){
                if(m[t[i]]==s[i]){
                   continue;
                }
                else{
                    return 0;
                }
            }
            else{
                 m[t[i]]=s[i];
            }
        }
        return true;

4.
  if(s.size()!=g.size())return false;
        queue<char>a,b;
        for(int i=0;i<s.size();i++){
            a.push(s[i]);
            b.push(g[i]);
        }
        int c=s.size();
        while(c!=0){
            char t=a.front();
            a.pop();
            a.push(t);
            if(a==b){
                return true;
            }
            c--;
        }
        return false;
5. unordered_map<char,int>mp;
        auto cmp=[&](char a,char b){
            if(mp[a]==mp[b])return a<b;
            return mp[a]>mp[b];
        };      
        for(int i=0;i<s.size();i++){
            mp[s[i]]++;
        }
      sort(s.begin(),s.end(),cmp);
        
       
        return s;
6.  if(a[0]=='0' && b[0]=='0'){
            return "0";
        }
       int c=0;
       string ans="";
       int sum=0;
       int j=b.size()-1;
       int i=a.size()-1;
       while(i>=0 || j>=0){
        sum=c;
            
        if(i>=0){
                sum+=a[i]-48;
            i--;
        }

        if(j>=0){
            sum+=b[j]-48;
            j--;
        }

        if(sum%2){
            ans+='1';
        }
        else{
            ans+='0';
        }
        (sum>1)?c=1:c=0;
       }
       if(c){
        ans+='1';
       }
     reverse(ans.begin(),ans.end());

7.stack<char>st;
        int ans=0;
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
                st.push(s[i]);
            }
            else if(s[i]==')'){
                ans=max(ans,static_cast<int>(st.size()));
                st.pop();
            }
            else{
                ans=max(ans,static_cast<int>(st.size()));
            }
        }
        return ans;
     return ans;
